import os, json, csv, time, re
from dotenv import load_dotenv
import html
import pandas as pd
from datetime import datetime, date, timedelta
from pathlib import Path 
from datetime import time

import shutil
import traceback
import pytz
import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode, ChatType
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters
)

# –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
ROOT_DIR = Path(__file__).resolve().parent.parent
load_dotenv(dotenv_path=ROOT_DIR / ".env")

BOT_TOKEN = os.getenv("BOT2_TOKEN")
ERROR_CHANNEL = int(os.getenv("ERROR_CHANNEL_ID"))

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º
BASE_DIR = Path(__file__).resolve().parent  # –ü–∞–ø–∫–∞, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
CONFIG = BASE_DIR / "config.json"
DATA_DIR = BASE_DIR / "data"
DATA_DIR.mkdir(exist_ok=True)

from telegram.constants import ParseMode

async def safe_send(bot, chat_id, text):
    try:
        await bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def load_config():
    config_path = Path(__file__).parent / "config.json"
    with open(config_path, encoding="utf-8") as f:
        return json.load(f)

def save_config(data):
    with CONFIG.open("w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def escape_markdown(text: str) -> str:
    escape_chars = r"\_*[]()~`>#+-=|{}.!<>"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", str(text))

def escape_user_tag(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç Markdown-—Å–∏–º–≤–æ–ª—ã —Ç–æ–ª—å–∫–æ –≤ –∏–º–µ–Ω–∏/—Ç–µ–≥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç."""
    escape_chars = r"\_*[]()~`>#+-=|{}.!"
    return re.sub(f"([{re.escape(escape_chars)}])", r"\\\1", str(text))
    
from telegram.constants import ChatType

def is_allowed_chat(chat, context):
    allowed_ids = set(int(k) for k in context.bot_data.get("projects", {}).keys())
    report_chs = {
        context.bot_data.get("report_channel"),
        context.bot_data.get("manager_report_channel"),
        context.bot_data.get("leader_report_channel"),
    }
    # –£–±–µ—Ä—ë–º None –∏–∑ report_chs, –µ—Å–ª–∏ –µ—Å—Ç—å
    report_chs = {ch for ch in report_chs if ch is not None}

    return (
        chat.type == ChatType.PRIVATE or
        chat.id in allowed_ids or
        chat.id in report_chs
    )

def is_allowed_menu_chat(chat, context):
    return chat.type == ChatType.PRIVATE or chat.id in {
        context.bot_data.get("report_channel"),
        context.bot_data.get("leader_report_channel"),
    }

def load_df(day: date):
    f = DATA_DIR / f"{day.isoformat()}.csv"
    if not f.exists():
        return pd.DataFrame(columns=["timestamp", "chat_id", "user_id", "message"])
    df = pd.read_csv(f)
    return df

def load_multiple_days_df(days_count=3):
    frames = []
    ttn_pattern = re.compile(r"[12456]\d{9,}")  # –ø–∞—Ç—Ç–µ—Ä–Ω –¢–¢–ù

    for i in range(days_count):
        day = date.today() - timedelta(days=i)
        try:
            df = load_df(day)
            if not df.empty:
                df = df[df["message"].astype(str).str.contains(ttn_pattern, na=False)]
                if not df.empty:
                    frames.append(df)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞ {day}: {e}")

    return pd.concat(frames, ignore_index=True) if frames else pd.DataFrame()

def get_today_file():
    today_file = DATA_DIR / f"{date.today().isoformat()}.csv"
    if today_file.exists():
        # –§–∞–π–ª –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –µ—Å—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        return today_file

    # –§–∞–π–ª–∞ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π –Ω–µ—Ç ‚Äî –∏—â–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –±–µ–∑ –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, messages_current.csv)
    # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π CSV –≤ –ø–∞–ø–∫–µ, –∫—Ä–æ–º–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ
    files = list(DATA_DIR.glob("*.csv"))
    old_file = None
    for f in files:
        if f != today_file:
            old_file = f
            break

    if old_file:
        # –ö–æ–ø–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –Ω–æ–≤—ã–π —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–æ–π
        shutil.copy2(old_file, today_file)
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª
        old_file.unlink()
        print(f"–°—Ç–∞—Ä—ã–π —Ñ–∞–π–ª {old_file} –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ {today_file}")
    else:
        # –°—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π (–ø—É—Å—Ç–æ–π)
        with open(today_file, "w", encoding="utf-8", newline="") as f:
            pass
        print(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª {today_file}")

    return today_file

def save_message_to_file(message):
    if not message.text:
        return
    if not re.search(r"[0-9]\d{11,13}", message.text):
        return

    try:
        f = get_today_file()

        row = {
            "timestamp": message.date.strftime("%Y-%m-%d %H:%M:%S"),
            "chat_id": message.chat.id,
            "user_id": str(message.from_user.id) if message.from_user else "unknown",
            "message": html.escape(message.text),
        }

        file_exists = f.exists() and f.stat().st_size > 0
        with open(f, "a", encoding="utf-8", newline="") as csvfile:
            writer = csv.DictWriter(csvfile, fieldnames=row.keys())
            if not file_exists:
                writer.writeheader()
            writer.writerow(row)

        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {f}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def resolve_user_name(bot, user_id: str):
    try:
        user = await bot.get_chat(int(user_id))
        if user.username:
            return f"@{user.username}"
        full = (user.first_name or "") + (" " + user.last_name if user.last_name else "")
        return escape_user_tag(full.strip() or f"User{user_id}")
    except:
        return escape_user_tag(f"@{user.username}")

async def format_project_report(df, bot_data, bot=None):
    today = date.today()
    today_str = today.strftime("%d.%m")
    out = [f"<b>–ó–Ω–∏–∂–∫–∏ –Ω–∞ {today_str}</b>\n"]
    total = 0
    unknowns = []

    df["timestamp"] = pd.to_datetime(df["timestamp"], errors="coerce")
    df_today = df[df["timestamp"].dt.date == today]

    projects = bot_data.get("projects", {})
    norms = bot_data.get("norms", {})
    users = bot_data.get("users", {})

    for cid, proj in projects.items():
        g = df_today[df_today["chat_id"] == int(cid)]
        g = g[g["message"].astype(str).str.contains(r"[12456]\d{9,}", na=False)]

        if g.empty:
            out.append(f"üëâ <b>{proj}: 0 ‚ÄºÔ∏è</b>")
            out.append(f"üéØ–Ω–æ—Ä–º–∞ -- {norms.get(proj, 0)}")
            out.append("üö©–ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n")
            continue

        ini_map = g["user_id"].astype(str).map(lambda u: users.get(u, None))
        vc = ini_map.value_counts()
        count = vc.sum()
        norm = norms.get(proj, 0)
        flag = "‚ÄºÔ∏è" if count < norm else ""
        out.append(f"üëâ <b>{proj}: {count} {flag}</b>")
        out.append(f"üéØ–Ω–æ—Ä–º–∞ -- {norm}")
        ops = ", ".join(f"{cnt}{ini}" for ini, cnt in vc.items() if ini)
        out.append(f"üö©–ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º: {ops or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n")
        total += count

        unknown_ids = set(g["user_id"].astype(str)) - set(users.keys())
        for uid in unknown_ids:
            unknowns.append((uid, proj))

    out.append(f"–ò–¢–û–ì–û –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º: {total}")

    # üîª –ë–ª–æ–∫ "–ë–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤"
    if unknowns and bot:
        out.append("\n‚ùì –ë–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤:")
        for uid, proj in unknowns:
            try:
                user = await bot.get_chat(int(uid))
                if user.username:
                    name = f"@{user.username}"
                else:
                    name = html.escape(user.full_name)
            except Exception:
                name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            out.append(f"üü• {uid} {name} ({proj})")

    return "\n".join(out), unknowns

    
def format_operator_report(df, bot_data):
    today = date.today()
    today_str = today.strftime("%d.%m")
    first_day = today.replace(day=1)
    users = bot_data.get("users", {})

    df["timestamp"] = pd.to_datetime(df["timestamp"], errors="coerce")
    df_month = df[(df["timestamp"].dt.date >= first_day) & (df["timestamp"].dt.date <= today)]
    df_today = df[df["timestamp"].dt.date == today]

    month_counts = df_month["user_id"].astype(str).value_counts()
    today_counts = df_today["user_id"].astype(str).value_counts()

    stats = []
    for uid, ini in users.items():
        if not ini or len(ini) != 2:
            continue
        month_total = month_counts.get(uid, 0)
        today_total = today_counts.get(uid, 0)
        bonus = "üí∞üíµ" if month_total >= 100 else ""
        stats.append((today_total, f"üéØ <b>{ini}</b> ‚Äî {today_total} / {month_total} {bonus}"))

    stats.sort(reverse=True, key=lambda x: x[0])
    lines = [f"<b>–ó–Ω–∏–∂–∫–∏ –Ω–∞ {today_str}</b>\n"]
    lines.extend([line for _, line in stats])
    return "\n".join(lines) if len(lines) > 1 else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º."

async def format_leader_report(df, bot_data, comment=None):
    text, unknowns = await format_project_report(df, bot_data)  # –î–æ–±–∞–≤–ª–µ–Ω–æ await
    if comment and comment.strip() and comment.strip() != "-":
        comment_escaped = html.escape(comment.strip()) # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å escape HTML, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        text += f"\n\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{comment_escaped}"
    return text

async def send_report(bot, bot_data, chat_id: int, report_type: str = None, comment=None, send_all=False):
    print(f"send_report: bot type = {type(bot)}, bot_data type = {type(bot_data)}")
    df = load_multiple_days_df(3)
    if df.empty:
        await safe_send(bot, chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏.")
        return

    try:
        if send_all:
            text_main, _ = await format_project_report(df, bot_data, bot)
            text_manager = format_operator_report(df, bot_data)
            text_leader = await format_leader_report(df, bot_data, comment)

            await safe_send(bot, chat_id, "*–û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç—á—ë—Ç:*\n" + text_main)
            await safe_send(bot, chat_id, "*–û—Ç—á—ë—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:*\n" + text_manager)
            await safe_send(bot, chat_id, "*–û—Ç—á—ë—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é:*\n" + text_leader)
        else:
            if report_type == "main":
                text, _ = await format_project_report(df, bot_data, bot)
            elif report_type == "manager":
                text = format_operator_report(df, bot_data)
            elif report_type == "leader":
                text = await format_leader_report(df, bot_data, comment)
            else:
                text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –æ—Ç—á—ë—Ç–∞."
            await safe_send(bot, chat_id, text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á—ë—Ç–∞: {e}")
        await notify_admin(bot, bot_data, f"–û—à–∏–±–∫–∞ send_report: {e}")

async def notify_admin(bot, bot_data, text: str):
    error_channel = bot_data.get("error_channel")
    if error_channel:
        try:
            await safe_send(bot, error_channel, f"‚ö†Ô∏è –û—à–∏–±–∫–∞:\n{text}")
        except:
            pass

async def scheduled_report(bot, bot_data):
    try:
        print(f"[{datetime.now()}] ‚è∞ scheduled_report")
        await send_report(bot, bot_data, bot_data["report_channel"], send_all=True)
    except Exception as e:
        tb = traceback.format_exc()
        print(f"[{datetime.now()}] ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç–∞: {tb}")
        await safe_send(bot, bot_data["error_channel"], f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ—Ç—á—ë—Ç–∞:\n{tb}")

def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –ú–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤", callback_data="report_menu")],
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users_menu")],
        [InlineKeyboardButton("üè∑Ô∏è –ù–æ—Ä–º—ã –ø—Ä–æ–µ–∫—Ç–æ–≤", callback_data="norms_menu")],
        [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞", callback_data="set_time")],
        [InlineKeyboardButton("üïµ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="check_missed")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–æ–≤", callback_data="channels_menu")],
        [InlineKeyboardButton("üö™ –í—ã—Ö–æ–¥", callback_data="exit")]
    ])

def report_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª", callback_data="send_report_main")],
        [InlineKeyboardButton("üì§ –û—Ç—á—ë—Ç –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º", callback_data="send_report_manager")],
        [InlineKeyboardButton("üì§ –û—Ç—á—ë—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é (—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º)", callback_data="send_report_leader")],
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ—Ç—á—ë—Ç—ã (—Å –∑–∞–¥–µ—Ä–∂–∫–æ–π)", callback_data="send_report_all")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

async def users_menu_keyboard(bot_data, bot):
    keyboard = []
    USERS = bot_data.get("users", {})
    df_multi = load_multiple_days_df(3)
    known_user_ids = set(USERS.keys())
    unknown_user_ids = sorted(set(df_multi["user_id"].astype(str).unique()) - known_user_ids)

    for uid, ini in USERS.items():
        keyboard.append([InlineKeyboardButton(f"{html.escape(ini)} ({uid})", callback_data=f"edit_user:{uid}")])

    for uid in unknown_user_ids:
        try:
            user = await bot.get_chat(int(uid))
            name = f"@{user.username}" if user.username else html.escape(user.full_name)
        except:
            name = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        keyboard.append([InlineKeyboardButton(f"üü• {uid} {name}", callback_data=f"add_ini:{uid}")])

    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user")])
    keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="del_user_menu")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)


def del_user_menu_keyboard(bot_data):
    keyboard = []
    for uid, ini in bot_data.get("users", {}).items():
        keyboard.append([InlineKeyboardButton(f"{ini} ({uid})", callback_data=f"del_user:{uid}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="users_menu")])
    return InlineKeyboardMarkup(keyboard)

def norms_menu_keyboard(bot_data):
    keyboard = []
    for proj in set(bot_data.get("projects", {}).values()):
        norm = bot_data.get("norms", {}).get(proj, 0)
        keyboard.append([InlineKeyboardButton(f"{proj}: {norm}", callback_data=f"edit_norm:{proj}")])
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="add_project")])
    keyboard.append([InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="del_project_menu")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)

def del_project_menu_keyboard(bot_data):
    keyboard = []
    for cid, proj in bot_data.get("projects", {}).items():
        keyboard.append([InlineKeyboardButton(f"{proj} ({cid})", callback_data=f"del_project:{cid}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="norms_menu")])
    return InlineKeyboardMarkup(keyboard)

def channels_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ö–∞–Ω–∞–ª –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞", callback_data="set_channel_report")],
        [InlineKeyboardButton("–ö–∞–Ω–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", callback_data="set_channel_manager")],
        [InlineKeyboardButton("–ö–∞–Ω–∞–ª —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è", callback_data="set_channel_leader")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

async def check_missed_messages(app):
    from_date = date.today().replace(day=1)
    df = load_df(from_date)

    if df.empty:
        print("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.")
        return

    df["timestamp"] = pd.to_datetime(df["timestamp"], errors="coerce")
    recent = df[df["timestamp"].dt.date >= from_date]

    if recent.empty:
        print("–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    print("üîé –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¢–¢–ù —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞:")
    for _, row in recent.iterrows():
        # –§–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `save_message_to_file`
        class FakeMessage:
            def __init__(self, row):
                self.text = row["message"]
                self.date = row["timestamp"]
                self.chat = type("chat", (), {"id": row["chat_id"]})()
                self.from_user = type("user", (), {"id": int(row["user_id"])})()

        msg = FakeMessage(row)
        save_message_to_file(msg)

    print("‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¢–¢–ù –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ñ–∞–π–ª.")


async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat = query.message.chat
    bot_data = context.bot_data
    chat_data = context.chat_data
    bot = context.bot
    await query.answer()

    if not is_allowed_menu_chat(chat, context):
        await query.answer("–ú–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –õ–° –∏ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.", show_alert=True)
        return

    data = query.data

    if data == "main_menu":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())

    elif data == "report_menu":
        await query.edit_message_text("–ú–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤:", reply_markup=report_menu_keyboard())

    elif data == "send_report_main":
        await send_report(bot, bot_data, bot_data["report_channel"], "main")
        try:
            await query.edit_message_text("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=report_menu_keyboard())
        except:
            await query.answer("–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", show_alert=True)

    elif data == "send_report_manager":
        await send_report(bot, bot_data, bot_data["manager_report_channel"], "manager")
        try:
            await query.edit_message_text("‚úÖ –û—Ç—á—ë—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=report_menu_keyboard())
        except:
            await query.answer("–û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", show_alert=True)

    elif data == "send_report_leader":
        chat_data["state"] = "wait_leader_comment"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ '-' –¥–ª—è –æ—Ç—á—ë—Ç–∞ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:")

    elif data == "send_report_all":
        await send_report(bot, bot_data, bot_data["report_channel"], report_type="main")
        await send_report(bot, bot_data, bot_data["report_channel"], report_type="manager")
        await send_report(bot, bot_data, bot_data["report_channel"], report_type="leader", comment="-")
        try:
            await query.edit_message_text("‚úÖ –í—Å–µ –æ—Ç—á—ë—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ report –∫–∞–Ω–∞–ª.", reply_markup=report_menu_keyboard())
        except:
            await query.answer("–û—Ç—á—ë—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", show_alert=True)

    elif data == "users_menu":
        keyboard = await users_menu_keyboard(bot_data, bot)
        await query.edit_message_text("–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=keyboard)

    elif data.startswith("edit_user:"):
        uid = data.split(":")[1]
        chat_data["state"] = "edit_user"
        chat_data["edit_uid"] = uid
        ini = bot_data.get("users", {}).get(uid, uid)
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∏–Ω–∏—Ü–∏–∞–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {ini}:")

    elif data.startswith("add_ini:"):
        uid = data.split(":")[1]
        chat_data["state"] = "add_user_ask_ini"
        chat_data["add_user_id"] = uid
        name = await resolve_user_name(bot, uid)
        await query.edit_message_text(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} ({name}). –í–≤–µ–¥–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª—ã:")

    elif data == "add_user":
        chat_data["state"] = "add_user_ask_id"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

    elif data == "del_user_menu":
        keyboard = del_user_menu_keyboard(bot_data)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

    elif data.startswith("del_user:"):
        uid = data.split(":")[1]
        if uid in bot_data.get("users", {}):
            bot_data["users"].pop(uid)
            save_config(bot_data)
            keyboard = await users_menu_keyboard(bot_data, bot)
            await query.edit_message_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω.", reply_markup=keyboard)
        else:
            keyboard = await users_menu_keyboard(bot_data, bot)
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)

    elif data == "norms_menu":
        keyboard = norms_menu_keyboard(bot_data)
        await query.edit_message_text("–ú–µ–Ω—é –Ω–æ—Ä–º:", reply_markup=keyboard)

    elif data.startswith("edit_norm:"):
        proj = data.split(":", 1)[1]
        chat_data["state"] = "edit_norm"
        chat_data["edit_proj"] = proj
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –Ω–æ—Ä–º—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ {proj}:")

    elif data == "add_project":
        chat_data["state"] = "add_project_ask_chat"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ chat_id –ø—Ä–æ–µ–∫—Ç–∞:")

    elif data == "del_project_menu":
        keyboard = del_project_menu_keyboard(bot_data)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)

    elif data.startswith("del_project:"):
        cid = int(data.split(":")[1])
        projects = bot_data.get("projects", {})
        norms = bot_data.get("norms", {})
        if cid in projects:
            proj_name = projects.pop(cid)
            norms.pop(proj_name, None)
            save_config(bot_data)
            keyboard = norms_menu_keyboard(bot_data)
            await query.edit_message_text(f"‚úÖ –ü—Ä–æ–µ–∫—Ç {proj_name} —É–¥–∞–ª—ë–Ω.", reply_markup=keyboard)
        else:
            keyboard = norms_menu_keyboard(bot_data)
            await query.edit_message_text("–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)

    elif data == "check_missed":
        await check_missed_messages(context.application)
        await query.edit_message_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=main_menu_keyboard())

    elif data == "channels_menu":
        keyboard = channels_menu_keyboard()
        await query.edit_message_text("–ú–µ–Ω—é –∫–∞–Ω–∞–ª–æ–≤:", reply_markup=keyboard)

    elif data == "set_channel_report":
        chat_data["state"] = "set_channel_report"
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π chat_id –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (—Ç–µ–∫—É—â–∏–π {bot_data.get('report_channel')}):")

    elif data == "set_channel_manager":
        chat_data["state"] = "set_channel_manager"
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π chat_id –∫–∞–Ω–∞–ª–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (—Ç–µ–∫—É—â–∏–π {bot_data.get('manager_report_channel')}):")

    elif data == "set_channel_leader":
        chat_data["state"] = "set_channel_leader"
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π chat_id –∫–∞–Ω–∞–ª–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (—Ç–µ–∫—É—â–∏–π {bot_data.get('leader_report_channel')}):")

    elif data == "set_time":
        chat_data["state"] = "set_time"
        await query.edit_message_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (—Ç–µ–∫—É—â–µ–µ {bot_data.get('report_time')}):")

    elif data == "exit":
        await query.answer("–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é.")
        await query.delete_message()

    else:
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):       
    if not update.message:
        return
    
    message = update.message        
    chat = message.chat
    chat_data = context.chat_data
    bot_data = context.bot_data

    if not message or not is_allowed_chat(chat, context):
        print("–ß–∞—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Ç")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:
    if chat_data.get("state") == "wait_leader_comment":
        comment = message.text.strip()
        await send_report(context.bot, bot_data, bot_data["leader_report_channel"], report_type="leader", comment=comment)
        chat_data.clear()
        await message.reply_text("‚úÖ –û—Ç—á—ë—Ç —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=report_menu_keyboard())
        return

    if chat_data.get("state") == "add_user_ask_id":
        uid = message.text.strip()
        if uid in bot_data["users"]:
            await message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            chat_data["add_user_id"] = uid
            chat_data["state"] = "add_user_ask_ini"
            await message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}:")
        return

    if chat_data.get("state") == "add_user_ask_ini":
        ini = message.text.strip()
        uid = chat_data.get("add_user_id")
        if uid:
            bot_data["users"][uid] = ini
            save_config(bot_data)
            keyboard = await users_menu_keyboard(bot_data, context.bot)
            await message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: {ini} ({uid})", reply_markup=keyboard)
            chat_data.clear()
        return

    if chat_data.get("state") == "edit_user":
        ini = message.text.strip()
        uid = chat_data.get("edit_uid")
        if uid:
            bot_data["users"][uid] = ini
            save_config(bot_data)
            keyboard = await users_menu_keyboard(bot_data, context.bot)
            await message.reply_text(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {ini} ({uid})", reply_markup=keyboard)
            chat_data.clear()
        return

    if chat_data.get("state") == "edit_norm":
        val = message.text.strip()
        proj = chat_data.get("edit_proj")
        try:
            norm_val = int(val)
            bot_data["norms"][proj] = norm_val
            save_config(bot_data)
            keyboard = norms_menu_keyboard(bot_data)
            await message.reply_text(f"‚úÖ –ù–æ—Ä–º–∞ –ø—Ä–æ–µ–∫—Ç–∞ {proj} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {norm_val}", reply_markup=keyboard)
            chat_data.clear()
        except:
            await message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    if chat_data.get("state") == "add_project_ask_chat":
        try:
            cid = int(message.text.strip())
            chat_data["new_project_chat_id"] = cid
            chat_data["state"] = "add_project_ask_name"
            await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        except:
            await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id.")
        return

    if chat_data.get("state") == "add_project_ask_name":
        name = message.text.strip()
        cid = chat_data.get("new_project_chat_id")
        if cid:
            bot_data["projects"][cid] = name
            save_config(bot_data)
            keyboard = norms_menu_keyboard(bot_data)
            await message.reply_text(f"‚úÖ –ü—Ä–æ–µ–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {name} ({cid})", reply_markup=keyboard)
            chat_data.clear()
        return

    if chat_data.get("state") == "set_channel_report":
        try:
            new_id = int(message.text.strip())
            bot_data["report_channel"] = new_id
            save_config(bot_data)
            await message.reply_text(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {new_id}", reply_markup=channels_menu_keyboard())
            chat_data.clear()
        except:
            await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id.")
        return

    if chat_data.get("state") == "set_channel_manager":
        try:
            new_id = int(message.text.strip())
            bot_data["manager_report_channel"] = new_id
            save_config(bot_data)
            await message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω: {new_id}", reply_markup=channels_menu_keyboard())
            chat_data.clear()
        except:
            await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id.")
        return

    if chat_data.get("state") == "set_channel_leader":
        try:
            new_id = int(message.text.strip())
            bot_data["leader_report_channel"] = new_id
            save_config(bot_data)
            await message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω: {new_id}", reply_markup=channels_menu_keyboard())
            chat_data.clear()
        except:
            await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π chat_id.")
        return

    if chat_data.get("state") == "set_time":
        val = message.text.strip()
        try:
            hh, mm = map(int, val.split(":"))
            if 0 <= hh < 24 and 0 <= mm < 60:
                bot_data["report_time"] = f"{hh:02}:{mm:02}"
                save_config(bot_data)

                rescheduler = bot_data.get("reschedule_report")
                if rescheduler:
                    rescheduler()

                await message.reply_text(f"‚úÖ –í—Ä–µ–º—è –æ—Ç—á—ë—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {hh:02}:{mm:02}", reply_markup=main_menu_keyboard())
                chat_data.clear()
            else:
                raise ValueError
        except:
            await message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM.")
        return

    # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç ---
    try:
        if message.text:
            save_message_to_file(message)
    except Exception as e:
        await notify_admin(context.application, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n{e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_allowed_menu_chat(update.effective_chat, context):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ /start –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –õ–° –∏ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö.")
        return
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç—á—ë—Ç–∞–º–∏.",
        reply_markup=main_menu_keyboard()
    )

# üîß –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö CSV-—Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π
def cleanup_old_data_files(days_to_keep=60):
    try:
        cutoff_date = date.today() - timedelta(days=days_to_keep)
        for file in DATA_DIR.glob("*.csv"):
            try:
                file_date = datetime.strptime(file.stem, "%Y-%m-%d").date()
                if file_date < cutoff_date:
                    file.unlink()
                    print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {file.name}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ {file.name}: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

# bot2/flashcall_app20.py

import os
import pytz
from datetime import time
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters
)
from fastapi import Request
from apscheduler.schedulers.asyncio import AsyncIOScheduler

load_dotenv()

BOT_TOKEN = os.getenv("BOT2_TOKEN")
ERROR_CHANNEL_ID = int(os.getenv("BOT2_ERROR_CHANNEL_ID", "0"))
cfg = load_config()
cfg["bot_token"] = BOT_TOKEN
cfg["error_channel"] = ERROR_CHANNEL_ID

# –ë–µ—Ä—ë–º –¥–æ–º–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π WEBHOOK_DOMAIN, –ª–∏–±–æ –∏–∑ RENDER_EXTERNAL_URL –Ω–∞ Render
WEBHOOK_DOMAIN = os.getenv("WEBHOOK_DOMAIN") or os.getenv("RENDER_EXTERNAL_URL") or "https://yourdomain.com"
WEBHOOK_PATH = "/webhook/bot2"
WEBHOOK_URL = f"{WEBHOOK_DOMAIN}{WEBHOOK_PATH}"


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
application = ApplicationBuilder().token(BOT_TOKEN).build()
application.bot_data.update(cfg)

application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(callback_handler))
application.add_handler(MessageHandler(filters.ALL, message_handler))

import asyncio

async def scheduled_job():
    await scheduled_report(application.bot, application.bot_data)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = AsyncIOScheduler()
hour, minute = map(int, cfg.get("report_time", "17:00").split(":"))
scheduler.add_job(
    scheduled_job,
    "cron", hour=hour, minute=minute, timezone=pytz.timezone("Europe/Kiev")
)

# === –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—â–µ–≥–æ multi_bot ===

async def handle_startup():
    await application.initialize()
    await application.start()

    # ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    await application.bot.set_webhook(WEBHOOK_URL)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()

    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    cleanup_old_data_files()

    if ERROR_CHANNEL_ID:
        await application.bot.send_message(ERROR_CHANNEL_ID, "‚úÖ bot2 –∑–∞–ø—É—â–µ–Ω")

async def handle_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return {"ok": True}

async def handle_shutdown():
    await application.stop()
    await application.shutdown()
